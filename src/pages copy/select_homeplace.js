let keyboard_builder = require("../../lib/helpers/keyboard_builder");
let helpers = require("../../lib/helpers");
let db = require("../../lib/helpers/db");
const Telegraf = require('telegraf');
let page = require("../../lib/paginator");
let config = require("../../config");

let page_config = {
	id: "SELECT_HOMEPLACE",
	name: "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ",
	requirements: []
}

async function trigger(ctx) {
	if (ctx.updateType == 'callback_query') await handle_callback_query(ctx);
	if (ctx.updateType == 'message') await handle_message(ctx);
}

module.exports = { page_config, call: trigger }

async function handle_callback_query(ctx) {
	let callbackData = ctx.CallbackPath.current;
	if (callbackData.route != page_config.id) return false;

	let perms = await page.check_requirements(ctx, page_config.requirements, page_config.id);
	if (!perms) return;

	if (config.places.length == 1) {
		let callback_step = await db.getValue(ctx, "callback_step");
		await db.setValue(ctx, "home_place", "0");
		await db.setValue(ctx, 'next_step', callback_step);
		await db.setValue(ctx, "callback_step", "");
		return;
	}

	try {
		if (!callbackData.action) callbackData.action = "main";
		if (routes[callbackData.action]) {
			await routes[callbackData.action](ctx);
		} else {
			throw ("route not found: " + callbackData.action);
		}
	} catch (error) {
		console.error("ERROR ON page ID:", page_config.id, error);
	}
}


async function handle_message(ctx) {
	if ((await db.getValue(ctx, 'step')) != 'homeplace_check_nearest_location') return;

	try {
		await db.messages.addToRemoveMessages(ctx, ctx.update.message);
		await db.messages.removeMessages(ctx, false);

		switch (ctx.updateSubTypes[0]) {
			case "location":
				let nearest = helpers.nearestPlace(ctx.update.message.location.latitude, ctx.update.message.location.longitude);
				await db.setValue(ctx, "step", "main_menu");
				if (nearest) {
					await db.setValue(ctx, 'home_place', nearest.id);
					let action = await db.getValue(ctx, "last_action");
					let new_message = await ctx.replyWithMarkdown(`–ë–ª–∏–∂–∞–π—à–µ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–æ –í–∞—Å ‚Äî ${nearest.name} üòâ`, { reply_markup: { inline_keyboard: await keyboard_builder.main_menu(ctx) } });
					await db.setValue(ctx, "last_action", "");
					ctx.callbackQuery = { data: action, message: new_message };
					ctx.update.message.message_id = new_message.message_id;
					ctx.updateType = "callback_query";
					return;
				} else {
					await db.setValue(ctx, 'home_place', "");
					await ctx.replyWithMarkdown(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–¥–∏—É—Å–µ 20 –∫–º –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è üò≠`, { reply_markup: { inline_keyboard: await keyboard_builder.main_menu(ctx) } });
				}
				break;
			case "text":
				if (ctx.update.message.text.toLowerCase().indexOf("–æ—Ç–º–µ–Ω") != -1) {
					await db.setValue(ctx, "step", "main_menu");
					return await ctx.replyWithMarkdown("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é! üòâ", { reply_markup: { inline_keyboard: await keyboard_builder.main_menu(ctx) } });
				}
				if (ctx.update.message.text.toLowerCase().indexOf("–æ–±—Ä–∞—Ç–Ω–æ") != -1) {
					await db.setValue(ctx, "step", "homeplace_select");
					return await ctx.replyWithMarkdown(`–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–∞–≤–µ–¥–µ–Ω–∏–π:`, { reply_markup: { inline_keyboard: keyboard_builder.places() } });
				}
				break;
			default:
				break;
		}
	} catch (error) {
		console.error("error on homeplace_check_nearest_location", error)
	}
}


let routes = {
	main: async (ctx) => {
		await ctx.editMessageText(`–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–∞–≤–µ–¥–µ–Ω–∏–π:`, { reply_markup: { inline_keyboard: keyboard_builder.places() } });
	},
	set: async (ctx) => {
		await db.setValue(ctx, "home_place", ctx.CallbackPath.current.data);
		let callback_step = await db.getValue(ctx, "callback_step");
		if (callback_step === "") {
			await ctx.editMessageText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –í–∞—Å üòâ", { reply_markup: { inline_keyboard: await keyboard_builder.main_menu(ctx) } });
		} else {
			await db.setValue(ctx, 'next_step', callback_step);
			await db.setValue(ctx, "callback_step", "");
		}
	},
	action: async (ctx) => {
		await db.setValue(ctx, "last_action", ctx.CallbackPath.current.data);
		await ctx.editMessageText(`–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–∞–≤–µ–¥–µ–Ω–∏–π:`, { reply_markup: { inline_keyboard: keyboard_builder.places() } });
	},
	find_nearest: async (ctx) => {
		await db.setValue(ctx, "step", 'homeplace_check_nearest_location')//replyWithMarkdown
		await ctx.editMessageText("–ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üôè", {
			reply_markup: Telegraf.Markup.inlineKeyboard([])
		});
		await ctx.replyWithMarkdown("–ù–∞ –º–µ—Å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–π—á–∞—Å –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ \"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π\".\n\n–ò–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.\n‚¨áÔ∏è —á–µ—Ä–µ–∑ —ç—Ç—É –∫–Ω–æ–ø–∫—É :)", {
			reply_markup: {
				keyboard: [
					[{ text: "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π", request_location: true }],
					[{ text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ" }],
					[{ text: "–û—Ç–º–µ–Ω–∞" }]
				],
				resize_keyboard: true,
				one_time_keyboard: true
			}
		});
	}
}