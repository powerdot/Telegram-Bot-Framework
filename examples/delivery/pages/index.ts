import { PageExport } from "../../../lib/types"

let page: PageExport = ({ db, config, paginator }) => {
    return {
        id: "index",
        name: "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
        actions: {
            main: {
                clearChat: true,
                async handler({ data }) {
                    let text = `–ü—Ä–∏–≤–µ—Ç - –ü—Ä–∏–≤–µ—Ç!`
                    if (data) {
                        text += ` data sum: ${data.reduce((a, b) => a + b, 0)}`
                    }
                    this.send({
                        text,
                        buttons: [
                            [{ text: "–º–µ–Ω—é", action: "menu" }],
                            [{ text: "–ø–æ–º–æ—â—å", action: "help" }],
                            [{ text: "—Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞", page: "random" }],
                            [
                                { text: "–ø—Ä–∏–≤–µ—Ç user", page: "name" },
                                { text: "–ø—Ä–∏–≤–µ—Ç –ø–µ—Ç—è", page: "name", data: "–ø–µ—Ç—è" }
                            ],
                            [{ text: "–¥–∞ –∏–ª–∏ –Ω–µ—Ç", page: "yesornot" }],
                            [
                                { text: "storage test", action: "storage" },
                                { text: "+1", action: "plusone" }
                            ],
                            [
                                { text: "str", action: "datatest", data: "asdasdasd" },
                                { text: "num", action: "datatest", data: 23 },
                                { text: "obj", action: "datatest", data: { name: 'sdsdffsdf-sdffsd', id: '33343434' } },
                                { text: "arr", action: "datatest", data: [{ name: 'sdsdfffsd', id: '333434' }] },
                                { text: "bool", action: "datatest", data: true }
                            ],
                            [
                                { text: "–¥–∞–π —Ü–∏—Ñ—Ä—ã", action: "numbers" },
                                { text: "–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ", action: "testbigdata" },
                            ]
                        ]
                    })
                }
            },
            numbers: {
                async handler() {
                    this.update({
                        text: "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ü–∏—Ñ–æ—Ä–∫–∏)"
                    })
                },
                async messageHandler({ text }) {
                    if (text === undefined) {
                        this.update({
                            text: `–•–û–ß–£ –¶–ò–§–û–†–ö–ò üò≠`,
                            buttons: [
                                [
                                    { text: "... –≤—ã–π—Ç–∏", action: "main" }
                                ]
                            ]
                        })
                    } else {
                        let is_number = /^\d+$/.test(text)
                        this.update({
                            text: `–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª ${text} - —ç—Ç–æ ${is_number ? '—Ç–æ —à–æ –Ω—É–∂–Ω–æ:))' : '–ù–ï —Ü–∏—Ñ—Ä–∞('}\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏...`,
                            buttons: [
                                [
                                    { text: "... –≤—ã–π—Ç–∏", action: "main" }
                                ]
                            ]
                        })
                    }
                }
            },
            async datatest({ data }) {
                this.update({
                    text: "–î–∞–Ω–Ω—ã–µ: " + data + ", —Ç–∏–ø: " + typeof data,
                    buttons: [
                        [{ text: "–æ–±—Ä–∞—Ç–Ω–æ", action: "main", data: [1, 2] }],
                    ]
                })
            },
            async storage() {
                let user = await this.user();
                await user.setValue("random", Math.random())
                await user.setValue("keked", { kek: true })
                let get = await user.getValue("random")
                console.log('1. user.getValue("random")', get)
                let get_keked = await user.getValue("keked")
                console.log('1.1. user.getValue("keked")', get_keked)
                let data = await user.get()
                console.log('2. user.get()', data)
                let users = await user.list()
                console.log('3. user.list()', users)
                this.update({
                    text: "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, —Å–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å",
                    buttons: [
                        [{ text: "–æ–±—Ä–∞—Ç–Ω–æ", action: "main" }],
                    ]
                })
            },
            async plusone() {
                let userData = await this.user();
                let value = (Number(await userData.getValue("plusone")) || 0) + 1
                await userData.setValue("plusone", value)
                this.update({
                    text: "–†–µ–∑—É–ª—å—Ç–∞—Ç: " + value,
                    buttons: [
                        [
                            { text: "–æ–±—Ä–∞—Ç–Ω–æ", action: "main" },
                            { text: "+1", action: "plusone" }
                        ],
                    ]
                })
            },
            menu() {
                this.update({
                    text: "–í—ã–±–µ—Ä–∏ –ø–æ–∫—É—à–∞—Ç—å: —Å–∞–ª–∞—Ç –∏–ª–∏ —Å—ã—Ä.",
                    buttons: [
                        [{ text: "–Ω–∞–∑–∞–¥!", action: "main" }],
                    ]
                })
            },
            help() {
                this.update({
                    text: "–ë–æ–≥ —Ç–µ–±–µ –≤ –ø–æ–º–æ—â—å.",
                    buttons: [
                        [{ text: "—Å–ø–∞—Å–∏–±–æ!", action: "main" }],
                        [{ text: "–≤ –º–µ–Ω—é", action: "menu" }],
                    ]
                })
            },
            testbigdata() {
                this.clearChat()
                this.goToAction({ action: "main", data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9] })
            }
        }
    }
}

module.exports = page;